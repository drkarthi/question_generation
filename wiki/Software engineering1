Software engineering is the study and an application of engineering to the design, development, and maintenance of software.<s>Typical formal definitions of software engineering are:
"the application of a systematic, disciplined, quantifiable approach to the development, operation, and maintenance of software";
"an engineering discipline that is concerned with all aspects of software production";
and "the establishment and use of sound engineering principles in order to economically obtain software that is reliable and works efficiently on real machines."<s>== History ==

When the first digital computers appeared in the early 1940s, the instructions to make them operate were wired into the machine.<s>Practitioners quickly realized that this design was not flexible and came up with the "stored program architecture" or von Neumann architecture.<s>Thus the division between "hardware" and "software" began with abstraction being used to deal with the complexity of computing.<s>Programming languages started to appear in the 1950s and this was also another major step in abstraction.<s>Major languages such as Fortran, ALGOL, and COBOL were released in the late 1950s to deal with scientific, algorithmic, and business problems respectively.<s>E.W.<s>Dijkstra wrote his seminal paper, "Go To Statement Considered Harmful", in 1968 and David Parnas introduced the key concept of modularity and information hiding in 1972 to help programmers deal with the ever increasing complexity of software systems.<s>The term "software engineering", coined by Margaret Hamilton, was first used in 1968 as a title for the world's first conference on software engineering, sponsored and facilitated by NATO.<s>The conference was attended by international experts on software who agreed on defining best practices for software grounded in the application of engineering.<s>The result of the conference is a report that defines how software should be developed [i.e., software engineering foundations].<s>The original report is publicly available.<s>The discipline of software engineering was created to address poor quality of software, get projects exceeding time and budget under control, and ensure that software is built systematically, rigorously, measurably, on time, on budget, and within specification.<s>Engineering already addresses all these issues, hence the same principles used in engineering can be applied to software.<s>The widespread lack of best practices for software at the time was perceived as a "software crisis".<s>Barry W. Boehm documented several key advances to the field in his 1981 book, 'Software Engineering Economics'.<s>These include his Constructive Cost Model (COCOMO), which relates software development effort for a program, in man-years T, to source lines of code (SLOC).<s>The book analyzes sixty-three software projects and concludes the cost of fixing errors escalates as we move the project toward field use.<s>The book also asserts that the key driver of software cost is the capability of the software development team.<s>In 1984, the Software Engineering Institute (SEI) was established as a federally funded research and development center headquartered on the campus of Carnegie Mellon University in Pittsburgh, Pennsylvania, United States.<s>Watts Humphrey founded the SEI Software Process Program, aimed at understanding and managing the software engineering process.<s>His 1989 book, Managing the Software Process, asserts that the Software Development Process can and should be controlled, measured, and improved.<s>The Process Maturity Levels introduced would become the Capability Maturity Model Integration for Development(CMMi-DEV), which has defined how the US Government evaluates the abilities of a software development team.<s>Modern, generally accepted best-practices for software engineering have been collected by the ISO/IEC JTC 1/SC 7 subcommittee and published as the Software Engineering Body of Knowledge (SWEBOK).<s>== Subdisciplines ==
Software engineering can be divided into ten subdisciplines.<s>They are:
Requirements engineering: The elicitation, analysis, specification, and validation of requirements for software.<s>Software design: The process of defining the architecture, components, interfaces, and other characteristics of a system or component.<s>It is also defined as the result of that process.<s>Software construction: The detailed creation of working, meaningful software through a combination of coding, verification, unit testing, integration testing, and debugging.<s>Software testing: An empirical, technical investigation conducted to provide stakeholders with information about the quality of the product or service under test.<s>Software maintenance: The totality of activities required to provide cost-effective support to software.<s>Software configuration management: The identification of the configuration of a system at distinct points in time for the purpose of systematically controlling changes to the configuration, and maintaining the integrity and traceability of the configuration throughout the system life cycle.<s>Software engineering management: The application of management activitiesplanning, coordinating, measuring, monitoring, controlling, and reportingto ensure that the development and maintenance of software is systematic, disciplined, and quantified.<s>Software engineering process: The definition, implementation, assessment, measurement, management, change, and improvement of the software life cycle process itself.<s>Software engineering tools and methods: The computer-based tools that are intended to assist the software life cycle processes (see Computer-aided software engineering) and the methods which impose structure on the software engineering activity with the goal of making the activity systematic and ultimately more likely to be successful.<s>Software quality management: The degree to which a set of inherent characteristics fulfills requirements.<s>== Education ==
Knowledge of computer programming is a prerequisite to becoming a software engineer.<s>In 2004 the IEEE Computer Society produced the SWEBOK, which has been published as ISO/IEC Technical Report 1979:2004, describing the body of knowledge that they recommend to be mastered by a graduate software engineer with four years of experience.<s>Many software engineers enter the profession by obtaining a university degree or training at a vocational school.<s>One standard international curriculum for undergraduate software engineering degrees was defined by the CCSE, and updated in 2004.<s>A number of universities have Software Engineering degree programs; as of 2010, there were 244 Campus programs, 70 Online programs, 230 Masters-level programs, 41 Doctorate-level programs, and 69 Certificate-level programs in the United States.<s>For practitioners who wish to become proficient and recognized as professional software engineers, the IEEE offers two certifications that extend knowledge above level achieved by an academic degree: Certified Software Development Associate and Certified Software Development Professional.<s>In addition to university education, many companies sponsor internships for students wishing to pursue careers in information technology.<s>These internships can introduce the student to interesting real-world tasks that typical software engineers encounter every day.<s>Similar experience can be gained through military service in software engineering.<s>== Profession ==

Legal requirements for the licensing or certification of professional software engineers vary around the world.<s>In the UK, the British Computer Society licenses software engineers and members of the society can also become Chartered Engineers (CEng), while in some areas of Canada, such as Alberta, British Columbia, Ontario, and Quebec, software engineers can hold the Professional Engineer (P.Eng) designation and/or the Information Systems Professional (I.S.P.)<s>designation.<s>In Canada, there is a legal requirement to have P.Eng when one wants to use the title "engineer" or practice "software engineering".<s>The United States, starting from 2013 offers an NCEES Professional Engineer exam for Software Engineering, thereby allowing Software Engineers to be licensed and recognized.<s>Mandatory licensing is currently still largely debated, and perceived as controversial.<s>In some parts of the US such as Texas, the use of the term Engineer is regulated by law and reserved only for use by individuals who have a Professional Engineer license.<s>The IEEE informs the professional engineer license is not required unless the individual would work for public where health of others could be at risk if the engineer was not fully qualified to required standards by the particular state.<s>Professional engineer licenses are specific to the state which has awarded them, and have to be regularly retaken.<s>The IEEE Computer Society and the ACM, the two main US-based professional organizations of software engineering, publish guides to the profession of software engineering.<s>The IEEE's Guide to the Software Engineering Body of Knowledge - 2004 Version, or SWEBOK, defines the field and describes the knowledge the IEEE expects a practicing software engineer to have.<s>The most current SWEBOK v3 is an updated version and was released in 2014.<s>The IEEE also promulgates a "Software Engineering Code of Ethics".<s>=== Employment ===
In 2004, the U. S. Bureau of Labor Statistics counted 760,840 software engineers holding jobs in the U.S.; in the same time period there were some 1.4 million practitioners employed in the U.S. in all other engineering disciplines combined.<s>Due to its relative newness as a field of study, formal education in software engineering is often taught as part of a computer science curriculum, and many software engineers hold computer science degrees and have no engineering background whatsoever.<s>Many software engineers work as employees or contractors.<s>Software engineers work with businesses, government agencies (civilian or military), and non-profit organizations.<s>Some software engineers work for themselves as freelancers.<s>Some organizations have specialists to perform each of the tasks in the software development process.<s>Other organizations require software engineers to do many or all of them.<s>In large projects, people may specialize in only one role.<s>In small projects, people may fill several or all roles at the same time.<s>Specializations include: in industry (analysts, architects, developers, testers, technical support, middleware analysts, managers) and in academia (educators, researchers).<s>Most software engineers and programmers work 40 hours a week, but about 15 percent of software engineers and 11 percent of programmers worked more than 50 hours a week in 2008.<s>Injuries in these occupations are rare.<s>However, like other workers who spend long periods in front of a computer terminal typing at a keyboard, engineers and programmers are susceptible to eyestrain, back discomfort, and hand and wrist problems such as carpal tunnel syndrome.<s>The field's future looks bright according to Money Magazine and Salary.com, which rated Software Engineer as the best job in the United States in 2006.<s>In 2012, software engineering was again ranked as the best job in the United States, this time by CareerCast.com.<s>=== Certification ===
The Software Engineering Institute offers certifications on specific topics like security, Process improvement and software architecture.<s>Apple, IBM, Microsoft and other companies also sponsor their own certification examinations.<s>Many IT certification programs are oriented toward specific technologies, and managed by the vendors of these technologies.<s>These certification programs are tailored to the institutions that would employ people who use these technologies.<s>Broader certification of general software engineering skills is available through various professional societies.<s>As of 2006, the IEEE had certified over 575 software professionals as a Certified Software Development Professional (CSDP).<s>In 2008 they added an entry-level certification known as the Certified Software Development Associate (CSDA).<s>The ACM had a professional certification program in the early 1980s, which was discontinued due to lack of interest.<s>The ACM examined the possibility of professional certification of software engineers in the late 1990s, but eventually decided that such certification was inappropriate for the professional industrial practice of software engineering.<s>In the U.K. the British Computer Society has developed a legally recognized professional certification called Chartered IT Professional (CITP), available to fully qualified members (MBCS).<s>Software engineers may be eligible for membership of the Institution of Engineering and Technology and so qualify for Chartered Engineer status.<s>In Canada the Canadian Information Processing Society has developed a legally recognized professional certification called Information Systems Professional (ISP).<s>In Ontario, Canada, Software Engineers who graduate from a Canadian Engineering Accreditation Board (CEAB) accredited program, successfully complete PEO's (Professional Engineers Ontario) Professional Practice Examination (PPE) and have at least 48 months of acceptable engineering experience are eligible to be licensed through the Professional Engineers Ontario and can become Professional Engineers P.Eng.<s>The PEO does not recognize any online or distance education however; and does not consider Computer Science programs to be equivalent to software engineering programs despite the tremendous overlap between the two.<s>This has sparked controversy and a certification war.<s>It has also held the number of P.Eng holders for the profession exceptionally low.<s>The vast majority of working professionals in the field hold a degree in CS, not SE.<s>Given the difficult certification path for holders of non-SE degrees, most never bother to pursue the license.<s>=== Impact of globalization ===
The initial impact of outsourcing, and the relatively lower cost of international human resources in developing third world countries led to a massive migration of software development activities from corporations in North America and Europe to India and later: China, Russia, and other developing countries.<s>This approach had some flaws, mainly the distance / timezone difference that prevented human interaction between clients and developers and the massive job transfer.<s>This had a negative impact on many aspects of the software engineering profession.<s>For example, some students in the developed world avoid education related to software engineering because of the fear of offshore outsourcing (importing software products or services from other countries) and of being displaced by foreign visa workers.<s>Although statistics do not currently show a threat to software engineering itself; a related career, computer programming does appear to have been affected.<s>Nevertheless, the ability to smartly leverage offshore and near-shore resources via the follow-the-sun workflow has improved the overall operational capability of many organizations.<s>When North Americans are leaving work, Asians are just arriving to work.<s>When Asians are leaving work, Europeans are arriving to work.<s>This provides a continuous ability to have human oversight on business-critical processes 24 hours per day, without paying overtime compensation or disrupting a key human resource, sleep patterns.<s>While global outsourcing has several advantages, global - and generally distributed - development can run into serious difficulties resulting from the distance between developers.<s>This is due to the key elements of this type of distance which have been identified as geographical, temporal, cultural and communication (which includes the use of different languages and dialects of English in different locations).<s>Research has been carried out in the area of global software development over the last 15 years and an extensive body of relevant work published which highlights the benefits and problems associated with the complex activity.<s>As with other aspects of software engineering research is ongoing in this and related areas.<s>== Related fields ==
Software engineering is a direct sub-field of engineering and has an overlap with computer science and management science.<s>It is also considered a part of overall systems engineering.<s>== Controversy ==


=== Over definition ===
Typical formal definitions of software engineering are:
"the application of a systematic, disciplined, quantifiable approach to the development, operation, and maintenance of software".<s>"an engineering discipline that is concerned with all aspects of software production"
"the establishment and use of sound engineering principles in order to economically obtain software that is reliable and works efficiently on real machines"
The term has been used less formally:
as the informal contemporary term for the broad range of activities that were formerly called computer programming and systems analysis;
as the broad term for all aspects of the practice of computer programming, as opposed to the theory of computer programming, which is called computer science;
as the term embodying the advocacy of a specific approach to computer programming, one that urges that it be treated as an engineering discipline rather than an art or a craft, and advocates the codification of recommended practices.<s>=== Criticism ===
Software Engineering sees its practitioners as individuals who follow well-defined engineering approaches to problem-solving.<s>These approaches are specified in various software engineering books and research papers, always with the connotations of predictability, precision, mitigated risk and professionalism.<s>This perspective has led to calls for licensing, certification and codified bodies of knowledge as mechanisms for spreading the engineering knowledge and maturing the field.<s>Software Craftsmanship has been proposed by a body of software developers as an alternative that emphasizes the coding skills and accountability of the software developers themselves without professionalism or any prescribed curriculum leading to ad-hoc problem-solving (craftmanship) without engineering (lack of predictability, precision, missing risk mitigation, methods are informal and poorly defined).<s>The Software Craftsmanship Manifesto extends the Agile Software Manifesto and draws a metaphor between modern software development and the apprenticeship model of medieval Europe.<s>Software engineering extends engineering and draws on the engineering model, i.e.<s>engineering process, engineering project management, engineering requirements, engineering design, engineering construction, and engineering validation.<s>The concept is so new that it is rarely understood, and it is widely misinterpreted, including in software engineering textbooks, papers, and among the communities of programmers and crafters.<s>One of the core issues in software engineering is that its approaches are not empirical enough because a real-world validation of approaches is usually absent, or very limited and hence software engineering is often misinterpreted as feasible only in a "theoretical environment."<s>Dijkstra who developed computer languages in the last century refuted the concepts of "software engineering" which was prevalent thirty years ago in the 1980s, arguing that those terms were poor analogies for what he called the "radical novelty" of computer science:

A number of these phenomena have been bundled under the name "Software Engineering".<s>As economics is known as "The Miserable Science", software engineering should be known as "The Doomed Discipline", doomed because it cannot even approach its goal since its goal is self-contradictory.<s>Software engineering, of course, presents itself as another worthy cause, but that is eyewash: if you carefully read its literature and analyse what its devotees actually do, you will discover that software engineering has accepted as its charter "How to program if you cannot."<s>== See also ==

Bachelor of Science in Information Technology
Bachelor of Software Engineering
List of software engineering conferences
List of software engineering publications
Software craftsmanship
Software Engineering Institute


== Notes ==


== References ==
Abran, Alain; Moore, James W.; Bourque, Pierre; Dupuis, Robert; Tripp, Leonard L. (2004).<s>Guide to the Software Engineering Body of Knowledge.<s>IEEE.<s>ISBN 0-7695-2330-7.<s>Sommerville, Ian (2008).<s>Software Engineering (7 ed.).<s>Pearson Education.<s>ISBN 978-81-7758-530-8.<s>Retrieved 10 January 2013.<s>== Further reading ==
Ghezzi, Carlo; Mehdi Jazayeri; Dino Mandrioli (2003) [1991].<s>Fundamentals of Software Engineering (2nd (International) ed.).<s>Pearson Education @ Prentice-Hall.<s>Jalote, Pankaj (2005) [1991].<s>An Integrated Approach to Software Engineering (3rd ed.).<s>Springer.<s>ISBN 0-387-20881-X.<s>Pressman, Roger S (2009).<s>Software Engineering: A Practitioner's Approach (7th ed.).<s>Boston, Mass: McGraw-Hill.<s>ISBN 978-0073375977.<s>Sommerville, Ian (2010) [2010].<s>Software Engineering (9th ed.).<s>Harlow, England: Pearson Education.<s>ISBN 978-0137035151.<s>Bruegge, Bernd; Dutoit, Allen (2009).<s>Object-oriented software engineering : using UML, patterns, and Java (3rd ed.).<s>Prentice Hall.<s>ISBN 978-0136061250.<s>== External links ==
Guide to the Software Engineering Body of Knowledge
The Open Systems Engineering and Software Development Life Cycle Framework OpenSDLC.org the integrated Creative Commons SDLC
Software Engineering Institute Carnegie Mellon
Learn Software Engineering Software Engineering Society<p>