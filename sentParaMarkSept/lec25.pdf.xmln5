The third one is what is called software re-engineering and this is also an example of afairly major architectural trend.<s> So, moving from a two tier to a three tier system could bean example of such a change and this change could be because you want bettermaintainability  with the code base that you have,  better maintainability with theapplication or it could be because you want to effect a major performance enhancementin the software you want a scale from a hundred users to ten thousand users so you wouldhave to re-engineer the software such that no new functionality is now being added to thesoftware but you  are  still effecting a major change in the underlined structure of thesoftware.<p>

So  here  are  different causes and corresponding strategies as how you would end updealing with it and these can all be done either in isolation  and typically that is  therecommended strategy is that you know to attempt one or more major changes togetherand you tend to keep these as separate as possible so that you can rollback if one of thechanges does  not  really happen the way you wanted to go and you can roll  back thechange completely back  out  the change and continue the other changes which arehappening in parallel with the software.<p>

(Refer Slide Time: 10:44 min)<p>

So the dynamics of what is called program evolution are the changes that happen in thesoftware.<s> The program evolution dynamics are simply the study of the change itself.<s> forexample,  how many changes took place to this software system after it was deployed,what are the kinds of changes that were taking place;  mainly bugs were  getting[10:50doubt] by the major new enhancement that were getting done but there werestructural changes that were being affected and so on.<s> So, people have obviously studiedthese  system and Lehman and Belady were a  couple  of engineers who studied majorsoftware projects  and came up with what they called as set of laws or  Lehmans lawswhich applied to all the systems that they studied as far as the evolution of the softwarewent;  that is,  the period of the software life cycle after it had been initially put intoservice and more than laws I mean these are not mathematical there is no mathematicalbasis for lot of these these are empirical in nature so  they have  it is  just an observationbased on the studies that they have done and they are just sensible observation rather thanlaws and they have been studied basically in the context of very very large systemsdevelopment so these are large enterprise system say ERP for a company like GE whichis  worldwide  in nature,  which has hundreds  and thousands employees,  which movesliterally  hundreds  and thousands of products  across the globe so the evolution of thesystems that controls something like this is primarily the subject of Lehmans study.<p>
