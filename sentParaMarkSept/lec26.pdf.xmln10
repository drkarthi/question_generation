The other philosophy is to keep things really simple up until the point that you need thefeature and then you build it in.<s> So you are not afraid of changing the code, you are notafraid of adding to the code but you can do that at the point in time if it is  requiredso why complicate this system the features that are never going to be used up until somelater point  in  time if you can build a simpler system.<s> So simplicity and communicationobviously support each other so you should only built minimalist systems,  minimalistmodules,  minimalist units which are put together and these can be changed  as thesoftware development process goes on.<p>

(Refer Slide Time: 39:24 min)<p>

The  third value is that of feedback and feedback in XP  works at various levels.<s> One  iscertainly the user feedback because of the increments that have been delivered to the userthrough different story collections that happen from the user;  that is, the requirementshave been changed because story is with an XP and it also happens amongst the differentdevelopers themselves so when pair programming is taking place one developer is givingthe other one feedback, there are frequent  reviews happening within this process whereone programmer presents the idea of  what is  it  that they have  done and the otherdesigners or the programmers in the team sit down and give them feedback on what couldhave been done better and what are the things that are working really well and so on.<s> Sothe emphasis is on various values that encourage a very very tight feedback cycle withinthe process.<p>

(Refer Slide Time: 40:07 min)<p>

And the fourth value is that of courage and by courage I mean that XP might ask you tore-factor which means you could end up to throwing your old code away much like theprototyping case;  although people are typically very very hesitant  to throw  away  workbut  they already done even understanding that the work is not good that it  could beharmful in the future and here you should absolutely fight against that tendency becauseof the fact that you may only have written a very small of the system it may not be largeenough for you to want to keep it  all  the  time so you can actually throw it away anddevelop this whole thing anew and that is something that XP encourages quite a bit.<p>

What is the release cycle for extreme programming look like?<p>

(Refer Slide Time: 40:53)<p>

there are  Remember these subset of requirements  that  go into an increment.<s> This  isnothing but an  agile development process.<s> The subset of requirement  is called story;  astory concentrates on a very small requirement or a subset requirement that are all relatedto each other and we will go through an example story as part of this lesson.<s> So you breakthat story, you take that particular story that is going to be part of this increment and onlytypically one story is part of the increment; you break it down into a set of tasks as thisdiagram shows you and then you plan the release based on the set of tasks that have to bedone.<s> at this point in time you kind of know  what the effect level required of thatincrement is going to be does it fit into the two week cycle is the question you have to askyourself; if it does not then it is a wrong story that you have picked and you might havego back and change it.<p>

Therefore,  you develop you develop  the software, you  integrate,  you test the software,release the software; this is a formal release unlike something that is done in prototyping.So this is something that is delivered to the customers, accepted by the customer and thenyou move on  and then you end up evaluating the system,  you select the stories for thenext release.<s> So  this very much looks like the  process that we saw earlier  of iterativedevelopment,  very very similar.<s> In  fact this is nothing but a process of iterativedevelopment specifically applied to this scenario.<p>
