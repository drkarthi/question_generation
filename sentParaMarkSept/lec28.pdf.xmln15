(Refer Slide Time: 52:53 min)<p>

ERP consists of inventory sales purchasing,  e-commerce shipping etc etc;  ERP consistsof inventory sales purchasing,  e-commerce shipping etc etc;  ERP consists of inventorysales purchasing, e-commerce, shipping etc etc  so  you can  all of these share a commoncore so underlying all these for example this system was built on top of the apple webobject  (Refer Slide Time: 53:05) on top of  XML, on  top of JMS etc  so  all these in thestructure is reused and as you go up; now, distribution for example consists of inventory,sales, purchasing, e-commerce, shipping; retail consists of other things and so on.<s> So thatis the notion of products lines.<p>

(Refer Slide Time: 53:24 min)<p>

Finally  we will briefly describe  what a design pattern is.<s> A design pattern  is  the finallevel of reuse that we talked about; is the notion of reusing design.<s> So you are not reusingcode, you are not reusing product families, you are not reusing architectures etc you arereusing designs and a design pattern is an abstraction of recurring theme that could existacross multiple systems.<s> A good example of this is something like the observer pattern.<s> Inthe case of the observer pattern the problem that is being defined is one where multipleapplications exist that may have to observe a change in the data that is going to take placeso an event is going to be passed every time the data is changed and the applications thatare going to observe the change in data are observers and they take appropriate action onthe events.<p>

Now,  this is a  very commonly occurring thing.<s> It  could occur in the fact that multipledisplays may have to be updated, it  could occur in the fact  that  multiple systems  mayhave to take different kinds of actions on  the occurrence of an event etc.<s> So why notabstract this out into a design pattern which is described formally using something likeUML.<s> For example, here is the observer pattern that is described using UML.<p>

(Refer Slide Time: 54:44 min)<p>

It says that the subject is the one that is changing and these are all abstract classes; thesecan be concretized  at the appropriate place.<s> So this is your  example of designed reuse.The notion is being reused, there may not be any code that goes along with it; it just saysif you have this particular problem of having multiple observers having to take actiondifferent actions on change in one subject then here is the design you may want toobserve.<s> This is an example of design reuse where the code itself may not get reused butthe notion or  the design is getting reused  because it is applicable on a  wide variety ofsituations.<p>

Thus,  what we have essentially learnt  here is two facets  of reuse:  reuse itself is prettycritical it can save a lot of money but on the other hand you have to very careful abouthow you end up employing reuse, also designing your applications for them to be reused,designing your components for them to be reused is another aspect of reuse that you haveto be aware of and certain conscious choices and process models have to be followed inboth the cases:  Designing for reuse and designing with reuse;  how do you make acomponent reusable versus how do you reuse components within building an application.Some of the techniques and strategies that we have gone through in the course of the lasttwo lectures and this is something that is obviously a  very very important facet  ofsoftware engineering in todays application development.<p>
