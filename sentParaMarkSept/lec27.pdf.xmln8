So what is the flip side of this?So far we have seen all the things that are great with reuse and how you can save timeand how you can save money and how you can build more reliable systems and so on butreuse comes with its own (16:15) so why do people not adopt it is the question; if it isso great then why was not this something that was that had been adopted say twenty orthirty years ago.<s> There can be increased cost of maintenance.<p>

(Refer Slide Time: 16:43 min)<p>

The one thing that you  can point  to is that if  something goes wrong and now yousuddenly  end up losing confidence in the components  that have been reused you mighthave to go,  figure out whether you know  this component is indeed the one that  isresponsible  for  the errors that are being caused, how do I fix this at this point in timebecause you will  not have access to the source code of these  components  or theframeworks that you end up using, it is typically a black box kind of reuse that happensand there may be lack of tools support also.<s> Most IDs today typically do not support thenotion of visually gluing components together as opposed to writing codes; most IDs orInteractive  Development  environments  are targeted towards allowing you to write codeefficiently not necessarily targeted towards building systems by gluing together prebuiltcomponents today.<s> So  the  tools  support is still not very good; lot of IDs today do havesome level of reuse support built into them especially at the level of user interfacecomponents.<s> But when you go into the backend server side part of the system you wouldnot find much available in terms of tool support.<p>
