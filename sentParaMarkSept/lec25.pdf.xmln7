So any software that does not require any kind of change is quickly going to becomeuseless and this process of change will continue until it is judged that it is no longer costfeasible in order to keep affecting these changes or rather just build a new system insteadof clean out trying to patch the whole thing.<s> It is very similar to a car that you may end upowning.<s> So, after a few years, after owning a car, if it is a brand new car that you boughttypically things will start to break down;  the  windshield  wipers need replacing, thecarburetor needs cleaning and so on and so forth; the tyres need to be replaced once andall, the  battery needs to be replaced  and so on  and there comes a time in  the  life of avehicle that you own that you will judge that it is no longer feasible to just maintain thisvehicle, the cost of maintenance is running so high that is probably far cheaper to get ridof it and go  in for a replacement a new vehicle;  it  could happen  to  almost anything inyour house, household appliances and so on; the same is to a software.<s> So that is what thefirst law is  really all about;  it undergoes change progressively and if there is no  changethere is a period in  which  no change really occurs then it  is kind of time to retire thatpiece of software and move on to the  next evolution of the software,  also,  the laws ofincreasing complexity.<p>

Now typically software when it is architectured from scratch or when it is architecturedon a clean  sheet of paper is build in a fairly modular clean way so that it is verymaintainable at that stage but as the software involves and changes are made to it severalpatches are applied to it  typically this process if not carefully managed  will cause thecomplexity of the software to increase; the complexity you mean things like coupling, thecohesion, kind of starts breaking down, the degree of coupling between different modulesmay increase and these are some of the metrics  that you have  already seen in earlierlectures and so these metrics basically tend towards a situation which the software is notvery healthy in nature and as the complexity is increased you have to have a really solidprocess to keep a check on it otherwise you are going to collapse into the first law whereyou will really have to a time comes to retire and move on to the next evolution of it.<p>
